{
  "version": 3,
  "sources": ["../../stacks/ApiStack.js", "../../stacks/StorageStack.js", "../../stacks/index.js"],
  "sourcesContent": ["import { Api, use } from \"@serverless-stack/resources\";\nimport { StorageStack } from \"./StorageStack\";\n\nexport function ApiStack({ stack, app }) {\n  const { table } = use(StorageStack);\n\n  // Create the API\n  const api = new Api(stack, \"Api\", {\n    defaults: {\n      function: {\n        permissions: [table],\n        environment: {\n          TABLE_NAME: table.tableName,\n        },\n      },\n    },\n    routes: {\n      \"POST /notes\": \"functions/create.main\",\n      \"GET /notes/{id}\": \"functions/get.main\",\n      \"GET /notes\": \"functions/list.main\",\n      \"PUT /notes/{id}\": \"functions/update.main\",\n    },\n  });\n\n  // Show the API endpoint in the output\n  stack.addOutputs({\n    ApiEndpoint: api.url,\n  });\n\n  // Return the API resource\n  return {\n    api,\n  };\n}", "import { Bucket, Table } from \"@serverless-stack/resources\";\n\nexport function StorageStack({ stack, app }) {\n  // Create the DynamoDB table\n  const table = new Table(stack, \"Notes\", {\n    fields: {\n      userId: \"string\",\n      noteId: \"string\",\n    },\n    primaryIndex: { partitionKey: \"userId\", sortKey: \"noteId\" },\n  });\n\n  // Create an S3 bucket\n  const bucket = new Bucket(stack, \"Uploads\");\n\n  return {\n    table,\n    bucket,\n  };\n}", "import { ApiStack } from \"./ApiStack\";\nimport { StorageStack } from \"./StorageStack\";\n\nexport default function main(app) {\n  app.setDefaultFunctionProps({\n    runtime: \"nodejs16.x\",\n    srcPath: \"backend\",\n    bundle: {\n      format: \"esm\",\n    },\n  });\n  app.stack(StorageStack).stack(ApiStack);\n}\n"],
  "mappings": ";;;;;;AAAA;;;ACAA;AAEO,sBAAsB,EAAE,OAAO,OAAO;AAE3C,QAAM,QAAQ,IAAI,MAAM,OAAO,SAAS;AAAA,IACtC,QAAQ;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV;AAAA,IACA,cAAc,EAAE,cAAc,UAAU,SAAS,SAAS;AAAA,EAC5D,CAAC;AAGD,QAAM,SAAS,IAAI,OAAO,OAAO,SAAS;AAE1C,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAjBgB;;;ADCT,kBAAkB,EAAE,OAAO,OAAO;AACvC,QAAM,EAAE,UAAU,IAAI,YAAY;AAGlC,QAAM,MAAM,IAAI,IAAI,OAAO,OAAO;AAAA,IAChC,UAAU;AAAA,MACR,UAAU;AAAA,QACR,aAAa,CAAC,KAAK;AAAA,QACnB,aAAa;AAAA,UACX,YAAY,MAAM;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,eAAe;AAAA,MACf,mBAAmB;AAAA,MACnB,cAAc;AAAA,MACd,mBAAmB;AAAA,IACrB;AAAA,EACF,CAAC;AAGD,QAAM,WAAW;AAAA,IACf,aAAa,IAAI;AAAA,EACnB,CAAC;AAGD,SAAO;AAAA,IACL;AAAA,EACF;AACF;AA9BgB;;;AEAD,cAAc,KAAK;AAChC,MAAI,wBAAwB;AAAA,IAC1B,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,EACF,CAAC;AACD,MAAI,MAAM,YAAY,EAAE,MAAM,QAAQ;AACxC;AATwB;",
  "names": []
}
